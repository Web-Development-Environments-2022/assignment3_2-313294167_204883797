---
openapi: 3.0.0
info:
  title: Swagger Petstore
  description: |
    This is a sample Petstore server.  You can find
    out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/GefenShahar/WEB-DEV-API/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://virtserver.swaggerhub.com/shahargefen/WEB-DEV-API/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://virtserver.swaggerhub.com/bla84/WEB-DEV-API/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: register
  description: Everything about register
- name: login
  description: Everything about login
- name: logout
  description: Everything about login
- name: recipes
  description: Everything about login
paths:
  /register:
    post:
      tags:
      - register
      summary: Add a new user to the server
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Register'
        required: true
      responses:
        "201":
          description: Registered successfully
        "400":
          description: Invalid input
  /login:
    post:
      tags:
      - login
      summary: Login to the server
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Login'
        required: true
      responses:
        "200":
          description: Logged in successfully
        "400":
          description: Invalid input
  /logout:
    post:
      tags:
      - logout
      summary: Logout from the server
      operationId: logoutUser
      responses:
        "200":
          description: Logged out successfully
  /recipes/main:
    get:
      tags:
      - recipes
      summary: Get 3 random recipes.
      operationId: getRandomRecipes
      responses:
        "200":
          description: successful operation
    post:
      tags:
      - login
      summary: Login to the server
      operationId: loginUserMain
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Login'
        required: true
      responses:
        "200":
          description: Logged in successfully
        "400":
          description: Invalid input
  /recipes/main/{id}:
    get:
      tags:
      - recipes
      summary: Get 3 random recipes and 3 latest.
      operationId: getRandomRecipesLoggedIn
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
  /recipes/{id}:
    get:
      tags:
      - recipes
      summary: Show recipe summery.
      operationId: recipeSummery
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
  /recipes/search:
    get:
      tags:
      - recipes
      summary: search recipe.
      operationId: searchRecipe
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Search'
  /recipes/add:
    post:
      tags:
      - recipes
      summary: Add recipe to the server
      operationId: addRecipe
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Add'
        required: true
      responses:
        "201":
          description: Add recipe successfully
        "400":
          description: Invalid input
  /recipes/myfavorites:
    get:
      tags:
      - recipes
      summary: Show my favorites recipes.
      operationId: favoritesRecipes
      responses:
        "200":
          description: successful operation
  /recipes/myrecipes:
    get:
      tags:
      - recipes
      summary: Show my recipes.
      operationId: myRecipes
      responses:
        "200":
          description: successful operation
  /recipes/familyrecipes:
    get:
      tags:
      - recipes
      summary: Show my family recipes.
      operationId: familyRecipes
      responses:
        "200":
          description: successful operation
components:
  schemas:
    Register:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3 to 8 letters only
          example: blabla
        firstname:
          type: string
        lastname:
          type: string
        country:
          type: string
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: username contains between 5 to 10 chars, at least one of them number and one of them special char.
          example: blabla1!
        passwordconfirmation:
          type: string
          description: username contains between 5 to 10 chars, at least one of them number and one of them special char.
          example: blabla1!
        email:
          type: string
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Search:
      type: object
      properties:
        searchparam:
          type: string
    Add:
      type: object
      properties:
        searchparam:
          type: string
