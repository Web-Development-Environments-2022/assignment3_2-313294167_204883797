---
openapi: 3.0.0
info:
  description: |
    This is a sample Recipes server, where you can save your favorite recipes, 
    add share your family and personal recipes with other users. 
  version: "1.0.0"
  title: Recipe Wizards
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/GefenShahar/WEB-DEV-API/1.0.0

    
tags:
  - name: register
    description: register to the site
    
  - name: login
    description: login to the site
    
  - name: logout
    description: logout from the site
  
  - name: recipes
    description: show recipes

  - name: user
    description: logged in user actions
    
paths:

  /register:
    post:
      tags:
        - register
      summary: Add a new user to the server
      description: A new record containing the new user details is added to the database
      responses:
        '201':
          description: Registered successfully
          
        '409':
          description: Username taken
          
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/Register'

  /login:
    post:
      tags:
        - login
      summary: Login to the server
      operationId: loginUser
      responses:
        '200':
          description: Logged in successfully
        '401':
          description: Username or Password incorrect
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/Login'

  /logout:
    post:
      tags:
        - logout
      summary: Logout from the server
      operationId: logoutUser
      responses:
        '200':
          description: Logged out successfully


                     
  /recipes/main:
    get:
      tags:
        - recipes
      summary: Get 3 random recipes.
      operationId: getRandomRecipes
      responses:
        '200':
          description: successful operation

        
    post:
      tags:
        - login
      summary: Login to the server
      operationId: loginUserMain
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/Login'
              
      responses:
        '200':
          description: Logged in successfully
        '400':
          description: Invalid input


  /recipes/main/{id}:
   get:
      parameters: 
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
        - recipes
      summary: Get 3 random recipes and 3 latest.
      operationId: getRandomRecipesLoggedIn
      responses:
        '200':
          description: successful operation

                
    

  /recipes/{id}:
    get:
      parameters: 
      - in: path
        name: id
        schema:
          type: integer
        required: true
  
      tags:
        - recipes
      summary: Show recipe summery.
      operationId: recipeSummery
      responses:
        '200':
          description: successful operation

                
  
  /recipes/search:
    get:
      tags:
        - recipes
      summary: search recipe.
      operationId: searchRecipe
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Search'
                

  /recipes/add:
    post:
      tags:
        - recipes
      summary: Add recipe to the server
      operationId: addRecipe
      responses:
        '201':
          description: Add recipe successfully
        '400':
          description: Invalid input
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: array
              items:
               $ref: '#/components/schemas/Add'
  
  
  /user/favorites/{id}:
    post:
      parameters: 
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - user
      summary: Save a recipe to favorites
      operationId: markAsFavorite
      responses:
        '200':
          description: The recipe was successfully saved as a favorite
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/Favorites'

    get:
      parameters: 
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - user
      summary: Show my favorites recipes.
      operationId: getFavoriteRecipes
      responses:
        '200':
          description: get favorite recipes for user by id

                
                
  /user/myrecipes:
    get:
      tags:
        - user
      summary: Show my recipes.
      operationId: myRecipes
      responses:
        '200':
          description: successful operation

                
                
  /user/familyrecipes:
    get:
      tags:
        - user
      summary: Show my family recipes.
      operationId: familyRecipes
      responses:
        '200':
          description: successful operation

                
  


externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
  
components:
  schemas:
  
    Register:
      type: object
      properties:
        username:
          type: string
          description: username contains between 3 to 8 letters only
          example: blabla
          minLength: 3
          maxLength: 8
        firstname:
          type: string
        lastname:
          type: string
        country:
          type: string
        password:
          type: string
          description: username contains between 5 to 10 chars, at least one of them number and one of them special char.
          example: blabla1!
          minLength: 5
          maxLength: 10

        passwordconfirmation:
          type: string
          description: username contains between 5 to 10 chars, at least one of them number and one of them special char.
          example: blabla1!
        email:
          type: string

    Login:
      type: object
      properties:
          username:
            type: string
          password:
            type: string

    Search:
      type: object
      properties:
          searchparam:
            type: string
            
    Add:
      type: object
      properties:
          searchparam:
            type: string

    Favorites:
      type: object
      properties:
          recipe_id:
            type: integer
